{"name":"Easy4arm","tagline":"努力做好他","body":"使用环境：\r\n\tOS：Fedora 17\r\n\tIDE:Eclipse 4.2\r\n\tCORSS_COMPILER 1.arm-none-eabi\r\n\t\t\t\t   2.arm-uclinuxeabi\r\n\tEclipse plugin:Update Site\r\n\t\tgit\t\t:  \thttp://download.eclipse.org/egit/update\r\n\t\tarm\t\t:  \thttp://gnuarmeclipse.sourceforge.net/updates\r\n\t\tvrapper\t:\thttp://vrapper.sourceforge.net/update-site/stable (eclipse 的一个中 vim 插件)\r\n\t\tzylin\t:\thttp://opensource.zylin.com/zylincdt\r\n\t\t\r\n使用方法：\r\n\ttools/lib.sh中的两个变量：\r\n\tOS_dir:如果OS的文件夹名字变化了，应该改变这个变量的值\r\n\tARCH_Sum:\r\n\t1.编译前，运行configure.sh脚本,make configure\r\n\t2.make all 编译与生成可执行文件的结合。\r\n\t(当configure.mk不存在的时候,make会执行make configure的功能，如果存在则make all的功能)\r\n当想清理项目时：\r\n\t1.make clean  是清掉O文件\r\n\t2.make distclean 清掉会自动生成的文件\r\n\t3.make dclean 清除D文件\r\n\t4.make allclean clean跟dclean的功能结合\r\n当项目的文件或名字改变时：\r\n\t使用，make update 来更新文件目录，而不必重新make configure\r\n=========================================================\r\n下面的目录树：\r\n=========================================================\r\n.\r\n├── chip  写着基本的芯片驱动\r\n│   ├── font_image.h\r\n│   ├── ssd1963.c\r\n│   ├── ssd1963.h\r\n│   ├── tsc2046.c\r\n│   └── tsc2046.h\r\n├── cpu\r\n│   └── cortex-m3\r\n│       └── stm32f103 标准化的文件夹，可以不用修改\r\n│           ├── CoreSupport\r\n│           │   ├── core_cm3.c\r\n│           │   └── core_cm3.h\r\n│           └── STM32F10x\r\n│               ├── stm32f10x.h\r\n│               ├── system_stm32f10x.c\r\n│               └── system_stm32f10x.h\r\n├── Doxyfile  Doxgen的配置文件\r\n├── lds_bak 保存着一些链接脚本，根据需要可能要修改\r\n│   └── cortex-m3.lds.bak.txt\r\n├── libc 一些与cpu无关的，但有经常用到的库文件\r\n│   ├── cpu_typed.h\r\n│   ├── font.c\r\n│   ├── font.h\r\n│   ├── libmath.c\r\n│   ├── libmath.h\r\n│   ├── string.c\r\n│   └── string.h\r\n├── Makefile 工程的管理文件\r\n├── OS\r\n│   └── ucos-ii\r\n├── package 这个的存在是为了将功能层与驱动层区分起来\r\n│   ├── tft.c\r\n│   ├── tft.h\r\n│   ├── usart_package.c\r\n│   └── usart_package.h\r\n├── protocol 一些基础的协议\r\n│   ├── cortex-m3\r\n│   │   └── inc\r\n│   │       └── spi.h\r\n│   └── spi.c\r\n├── README\r\n├── start_code\r\n│   ├── cortex-m3\r\n│   │   └── startup_stm32f10x_hd.s\r\n│   └── mem.inc\r\n├── sysdev 写着关于cpu基本的内置功能驱动\r\n│   ├── cortex-m3\r\n│   │   ├── inc\r\n│   │   │   ├── fsmc.h\r\n│   │   │   ├── gpio.h\r\n│   │   │   ├── interrupt.h\r\n│   │   │   ├── led.h\r\n│   │   │   ├── rcc.h\r\n│   │   │   ├── sys.h\r\n│   │   │   ├── systick.h\r\n│   │   │   ├── touch.h\r\n│   │   │   └── usart.h\r\n│   │   └── src\r\n│   │       ├── fsmc.c\r\n│   │       ├── rcc.c\r\n│   │       └── systick.c\r\n│   └── general 通用设备函数\r\n│       ├── gpio.c\r\n│       ├── init_main.c\r\n│       ├── interrupt.c\r\n│       ├── led.c\r\n│       ├── touch.c\r\n│       └── usart.c\r\n├── tools\r\n│   ├── configure.sh 配置configure.mk\r\n│   ├── lib.sh\r\n│   ├── setting.sh  配置用户宏\r\n│   └── update.sh\t更新configure.mk文件，而不必因小小文件名改变而重新配置configure.mk\r\n└── user  用户的应用层代码，包括一些用户配置\r\n    ├── main.c\r\n    └── user_configure\r\n        ├── configure.h 里面有很多宏开关\r\n        └── include.h\r\n\r\n24 directories, 55 files\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}